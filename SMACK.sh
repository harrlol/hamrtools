#!/bin/bash
set -u

# Suite for Modification or Annotation-purposed Cleaning and Keeping

if [ "$#" -lt 14 ]; then
echo "Missing arguments!"
echo "USAGE: SMACK.sh <SRA Accession list.txt> <SE/PE> <trim requirement T/F> <repo dir> <genome.fasta> 
        <annotation.gff3> <bowtie dir> <sam filter.pl> <hamr model.Rdata> <read length> <name table.csv>
        <ant lib> <out dir> <#cores>" 
echo "EXAMPLE:"
exit 1
fi

# A list of SRR accession numbers generated from SRA run selector tool, 
# usually represent the sequencing data of an entire experiment, .txt file.
acc=$1

# Whether paired-end or single-end sequencing was used. 
end=$2

# Whether the data downloaded are trimmed or untrimmed fastq files. 
# If you want SMACK to trim it, put F 
trim=$3

# A directory containing all extra packages needed (sra, hamr)
repo=$4

# The genome file of your model organism, .fasta file
gno=$5

# The annotation file of your model organism (usually found along with genome), .gff3 file
ant=$6

# The bowtie annotation directory from your bowtie step
bt=$7

# The provided filtering file, .pl file
filter=$8

# The provided trained model for HAMR, .Rdata file
model=$9

# The length of your reads (usually ranging from 50~200)
len=${10}

# A table corresponding each SRR file to the actual condition of each sequencing data, for the ease of downstream, .csv file
names=${11}

# A folder with annotation libraries of your model organism as generated by running Diep's script
antlib=${12}

# Your desired output directory
out=${13}

# Number of threads on your CPU that this program can use
cores=${14}

# Records the current directory (of this script)
curdir=$(dirname $0)

#######################
# Running checks to ensure SMACK.sh can run normally
sra=""
hamr=""

shopt -s nocaseglob

for folder in "$repo"/*; do
    # Check if the folder name contains the string "sratoolkit"
    if [[ "$folder" == *sratoolkit* ]]; then
        sra="$folder"
    # Check if the folder name contains the string "hamr" (case unsensitive)
    elif [[ "${folder,,}" == *hamr* ]]; then
        hamr="$folder"
    fi
done

shopt -u nocaseglob

if [ ! -n "$sra" ]; then
    echo "SRA Toolkit not installed, please check."
    exit 1
fi

if [ ! -n "$hamr" ]; then
    echo "HAMR not installed, please check."
    exit 1
fi

if [ ! -d "$out" ] 
then 
    mkdir $out
    echo "created path: $out"
fi

if [ ! -d "$out/datasets" ] 
then 
    mkdir $out/datasets
    echo "created path: $out/datasets"
fi

# UNTEXT IT LATER
# # Grabs the fastq files from acc list provided into the dir ~/datasets
dumpout=$out/datasets
# $curdir/fasterq-dumpAdapter.sh \
#     $sra \
#     $acc \
#     $dumpout \
#     $end $trim $cores

# Checks if the files were trimmed or cleaned, and if so, take those files for downstream
hamrin=""
suf=""
if [ -d "$dumpout/trimmed" ] 
then 
    hamrin=$dumpout/trimmed
    suf="fq"
else
    suf="fastq"
    if [ -d "$dmpout/cleaned" ] 
    then 
        hamrin=$dumpout/cleaned
    else
        hamrin=$dumpout
    fi
fi

# In the case where no above folders can be found
if [ ! -n "$hamrin" ]; then
    echo "failed to locate downloaded fastq files"
    exit 1
fi

if [ ! -d "$out/pipeline" ] 
then
    mkdir "$out/pipeline"
    echo "created path: $out/pipeline"
fi


if [ ! -d "$out/hamr_out" ] 
then
    mkdir $out/hamr_out
    echo "created path: $out/hamr_out"
fi

if [ ! -d "$out/hamr_out/zero_mod.txt" ] 
then 
    cd $out/hamr_out
    echo "Below samples have 0 HAMR predicted mods:" > zero_mod.txt
    cd
fi

# UNTEXT IT LATER
# Pipes each fastq down the hamr pipeline, and stores out put in ~/hamr_out
# Note there's also a hamr_out in ~/pipeline/SRRNUMBER_temp/, but that one's for temp files
mis=$(($len*6/100))
i=1
for f in $hamrin/*.$suf
do ((i=i%$cores)); ((i++==0)) && wait
    $curdir/fastq2hamr.sh \
    $f \
    $ant \
    $bt \
    $gno \
    $filter \
    $model \
    $out \
    $mis \
    $names &
done

# Produce consensus bam files based on filename (per extracted from name.csv) and store in ~/consensus
if [ ! -d "$out/consensus" ] 
then 
    mkdir $out/consensus
    echo "created path: $out/consensus"
fi

# Check whether any hamr.mod.text is present
if [ -z "$(ls -A $out/hamr_out)" ]; then
   echo "No HAMR predicted mod found for any sequencing data in this project, please see log for verification"
   exit 1
fi

Rscript $curdir/findConsensus.R \
    $out/hamr_out \
    $out/consensus

wait

# Produce overlap bam files with the provided annotation library folders and store in ~/lap
if [ ! -d "$out/lap" ] 
then 
    mkdir $out/lap
    echo "created path: $out/lap"
fi

for f in $out/consensus/*
do $curdir/consensusOverlap.sh \
    $f \
    $antlib/*_CDS.bed \
    $antlib/*_UTR.bed \
    $antlib/*_gene.bed \
    $antlib/*_mRNA.bed \
    $out/lap 
done